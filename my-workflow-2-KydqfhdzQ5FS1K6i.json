{"createdAt":"2025-08-15T13:05:59.185Z","updatedAt":"2025-08-15T13:20:03.000Z","id":"KydqfhdzQ5FS1K6i","name":"My workflow 2","active":false,"isArchived":true,"nodes":[{"parameters":{"assignments":{"assignments":[{"id":"search-config","name":"search_config","value":"={{ { city: 'Praha', term: 'kade≈ônictv√≠', max_results: 150, current_page: 1 } }}","type":"object"},{"id":"loop-state","name":"loop_state","value":"={{ { collected_links: [], total_pages: 0, finished: false, processed_count: 0 } }}","type":"object"},{"id":"rate-limit","name":"rate_limit","value":"={{ { requests_per_second: 2, delay_between_requests: 500 } }}","type":"object"}]},"options":{"dotNotation":true}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[208,208],"id":"13ab073c-c5f5-41cf-9528-f8e239c11646","name":"üîß Initialize Configuration"},{"parameters":{"jsCode":"// Enhanced Loop Initialization with Error Handling\nconst config = $json.search_config;\nconst loopState = $json.loop_state;\n\n// Validate input parameters\nif (!config.city || !config.term) {\n  throw new Error('City and term are required parameters');\n}\n\n// Normalize search parameters\nconst city = config.city.trim().toLowerCase();\nconst term = config.term.trim().toLowerCase();\nconst searchQuery = [term, city].filter(Boolean).join('+');\n\n// Initialize loop state\nconst initialState = {\n  search_config: {\n    ...config,\n    city: city,\n    term: term,\n    search_query: searchQuery\n  },\n  loop_state: {\n    ...loopState,\n    current_page: 1,\n    collected_links: [],\n    total_pages: 0,\n    finished: false,\n    processed_count: 0,\n    errors: []\n  },\n  rate_limit: $json.rate_limit,\n  current_url: `https://www.firmy.cz/?q=${searchQuery}`\n};\n\nconsole.log(`üöÄ Initializing scraper for: ${city} - ${term}`);\nconsole.log(`üìä Max results: ${config.max_results}`);\n\nreturn {\n  json: initialState\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[400,208],"id":"0b64416c-b2f8-4064-a8fd-a28a34faf662","name":"üîÑ Initialize Loop State"},{"parameters":{"url":"={{ $json.current_url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"cs-CZ,cs;q=0.9,en;q=0.8"},{"name":"Cache-Control","value":"no-cache"}]},"options":{"allowUnauthorizedCerts":false,"response":{"response":{"responseFormat":"text"}},"timeout":30000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[608,208],"id":"9be9e36d-bc95-4435-ba94-194e3044a638","name":"üìÑ Scrape Search Page","retryOnFail":true,"waitBetweenTries":5000,"maxTries":3,"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Enhanced Link Extraction with Better Error Handlingnconst html = $json.data || '';nconst config = $json.search_config;nconst loopState = $json.loop_state;nn// Validate HTML contentnif (!html || html.length < 1000) {n  return {n    json: {n      error: 'Invalid or empty HTML response',n      search_config: config,n      loop_state: loopState,n      should_continue: falsen    }n  };n}nn// Extract pagination informationnconst pageDataRegex = /data-dot-data=\\\"{&quot;current&quot;:(\\d+),\\s*&quot;all&quot;:(\\d+)}\"/i;nconst pageMatch = html.match(pageDataRegex);nconst totalPages = pageMatch ? parseInt(pageMatch[2]) : 1;nconst currentPage = pageMatch ? parseInt(pageMatch[1]) : 1;nn// Extract business links with improved regexnconst linkRegex = /<a\\s+class=\"titleLinkOverlay\"[^>]*?href=\"([^\"]*)\"/gi;nconst newLinks = [];nlet match;nnwhile ((match = linkRegex.exec(html)) !== null) {n  const url = match[1];n  if (url && url.startsWith('https://www.firmy.cz/detail/')) {n    newLinks.push(url);n  }n}nn// Deduplicate and add new linksnconst allLinks = [...new Set([...loopState.collected_links, ...newLinks])];nconst processedCount = allLinks.length;nn// Determine if we should continuenconst hasEnoughLinks = processedCount >= config.max_results;nconst isLastPage = currentPage >= totalPages;nconst shouldContinue = !hasEnoughLinks && !isLastPage;nn// Prepare next URL if continuingnlet nextUrl = null;nif (shouldContinue) {n  const nextPage = currentPage + 1;n  nextUrl = `https://www.firmy.cz/?q=${config.search_query}&page=${nextPage}`;n}nn// Update loop statenconst updatedLoopState = {n  ...loopState,n  current_page: currentPage,n  total_pages: totalPages,n  collected_links: allLinks,n  processed_count: processedCount,n  finished: !shouldContinue,n  should_continue: shouldContinuen};nnconsole.log(`üìÑ Page ${currentPage}/${totalPages}: Found ${newLinks.length} new links`);nconsole.log(`üìä Total: ${processedCount}/${config.max_results} links`);nconsole.log(`üîÑ Continue: ${shouldContinue ? 'YES' : 'NO'}`);nnreturn {n  json: {n    search_config: config,n    loop_state: updatedLoopState,n    rate_limit: $json.rate_limit,n    current_url: nextUrl,n    business_urls: allLinks.slice(0, config.max_results),n    count: Math.min(processedCount, config.max_results),n    total_found: processedCountn  }n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[800,208],"id":"5d0339b8-74e0-4540-b40d-7c557fce2eba","name":"üîó Extract & Process Links"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"continue-condition","leftValue":"={{ $json.loop_state.should_continue }}","rightValue":true,"operator":{"type":"boolean","operation":"equal"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[1008,208],"id":"74f31f16-878e-4085-8c2c-a705b39417ae","name":"ü§î Continue Loop?"},{"parameters":{"amount":"={{ $json.rate_limit.delay_between_requests / 1000 }}","unit":"seconds"},"type":"n8n-nodes-base.wait","typeVersion":1,"position":[1200,208],"id":"73ecfa7e-9c5c-4871-9704-8834b996ec6f","name":"‚è±Ô∏è Rate Limit Wait","webhookId":"ee86710e-5760-47d3-b2ee-1ba6d3773243"},{"parameters":{"fieldToSplitOut":"business_urls","options":{}},"type":"n8n-nodes-base.itemLists","typeVersion":3,"position":[1408,208],"id":"130633d6-7fe4-4fb0-b775-ea6561411b36","name":"üìã Split URLs for Processing"},{"parameters":{"batchSize":5,"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1600,208],"id":"7155a50b-0f2f-4396-abe4-abff630b5b95","name":"üì¶ Process in Batches (5)"},{"parameters":{"amount":"={{ $json.rate_limit.delay_between_requests / 1000 }}","unit":"seconds"},"type":"n8n-nodes-base.wait","typeVersion":1,"position":[1808,208],"id":"13cd6732-a59b-426d-bfbf-d0195673d2f9","name":"‚è±Ô∏è Batch Rate Limit","webhookId":"34e3ed6d-de31-4bc0-a199-c606f3193329"},{"parameters":{"url":"={{ $json }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"cs-CZ,cs;q=0.9,en;q=0.8"}]},"options":{"timeout":30000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2000,208],"id":"4ad0df75-98ce-4f39-8812-58dfff299899","name":"üè¢ Scrape Business Page","retryOnFail":true,"waitBetweenTries":3000,"maxTries":3,"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Enhanced Business Data Extractor v6.0\n// Improved error handling and data validation\n\nconst html = $json.data || '';\nconst businessUrl = $json.business_urls || $json;\n\n// Input validation\nif (!html || html.length < 500) {\n  return {\n    json: {\n      error: 'Invalid HTML content',\n      business_url: businessUrl,\n      business_name: 'ERROR: Invalid Content',\n      email: '',\n      phone: '',\n      website: '',\n      description: '',\n      street: '',\n      city: '',\n      postal_code: '',\n      full_address: '',\n      ico: '',\n      opening_hours: '',\n      all_phones: '',\n      all_websites: '',\n      facebook: '',\n      instagram: '',\n      linkedin: '',\n      twitter: '',\n      youtube: '',\n      latitude: '',\n      longitude: ''\n    }\n  };\n}\n\n// Helper functions with error handling\nconst safeExtract = (regex, targetHtml = html) => {\n  try {\n    const match = targetHtml.match(regex);\n    return match && match[1] ? match[1].replace(/<[^>]*>/g, '').trim() : null;\n  } catch (e) {\n    return null;\n  }\n};\n\nconst tryParseJson = (str) => {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return null;\n  }\n};\n\nconst formatCzechPhone = (phone) => {\n  if (!phone) return null;\n  const cleaned = phone.replace(/\\D/g, '');\n  if (cleaned.length === 9) return `+420${cleaned}`;\n  if (cleaned.length === 12 && cleaned.startsWith('420')) return `+${cleaned}`;\n  if (phone.startsWith('+420')) return phone.replace(/\\s/g, '');\n  return phone;\n};\n\nconst isValidEmail = (email) => {\n  if (!email) return false;\n  return !email.match(/(firmy\\.cz|example\\.com)/i);\n};\n\nconst isValidWebsite = (url) => {\n  if (!url) return false;\n  return !url.match(/(analytics|doubleclick|facebook\\.com\\/tr|gtm|pixel|firmy\\.cz|mapy\\.com)/i);\n};\n\n// Initialize data structure\nlet extractedData = {\n  business_name: null,\n  contact: {\n    phone: [],\n    websites: [],\n    email: null\n  },\n  address: {\n    street: null,\n    city: null,\n    postal_code: null,\n    full_address: null,\n    coordinates: {\n      latitude: null,\n      longitude: null\n    }\n  },\n  description: null,\n  ico: null,\n  opening_hours: [],\n  business_url: businessUrl\n};\n\n// Extract company name with multiple fallback methods\nextractedData.business_name = safeExtract(/<h1[^>]*class=\\\"[^\\\"]*detailPrimaryTitle[^\\\"]*\\\"[^>]*>([\\s\\S]*?)<\\/h1>/i) ||\n                    safeExtract(/<h1[^>]*class=\\\"[^\\\"]*detailPrimaryTitle[^\\\"]*\\\"[^>]*content=\\\"([^\\\"]*)\\\"/i) ||\n                    safeExtract(/<title[^>]*>([^<]*?)<\\/title>/i);\n\n// Extract primary phone\nextractedData.contact.phone.push(formatCzechPhone(safeExtract(/<span[^>]*data-dot=\\\"origin-phone-number\\\"[^>]*>([\\s\\S]*?)<\\/span>/i)));\n\n// Extract JSON-LD data (most reliable method)\nconst jsonLdRegex = /<script type=\\\"application\\/ld\\+json\\\"[^>]*>([\\s\\S]*?)<\\/script>/gi;\nconst jsonLdMatches = html.match(jsonLdRegex) || [];\nlet jsonLdData = null;\n\nfor (const match of jsonLdMatches) {\n  const content = match.replace(/<script type=\\\"application\\/ld\\+json\\\"[^>]*>|<\\/script>/g, '');\n  const parsedJson = tryParseJson(content);\n  if (parsedJson && (parsedJson['@type'] === 'LocalBusiness' || parsedJson['@type'] === 'Restaurant')) {\n    jsonLdData = parsedJson;\n    break;\n  }\n}\n\n// Process JSON-LD data if available\nif (jsonLdData) {\n  if (!extractedData.business_name) {\n    extractedData.business_name = jsonLdData.name;\n  }\n  \n  if (extractedData.contact.phone.length === 0 && jsonLdData.telephone) {\n    extractedData.contact.phone.push(formatCzechPhone(jsonLdData.telephone));\n  }\n  \n  // Extract websites\n  let allWebsites = [];\n  if (jsonLdData.url && isValidWebsite(jsonLdData.url)) {\n    allWebsites.push(jsonLdData.url);\n  }\n  if (jsonLdData.sameAs && Array.isArray(jsonLdData.sameAs)) {\n    allWebsites.push(...jsonLdData.sameAs.filter(isValidWebsite));\n  }\n  \n  extractedData.contact.websites = [...new Set(allWebsites)];\n  extractedData.description = jsonLdData.description;\n  extractedData.contact.email = jsonLdData.email && isValidEmail(jsonLdData.email) ? jsonLdData.email : null;\n  \n  // Extract address data\n  if (jsonLdData.address) {\n    extractedData.address.street = jsonLdData.address.streetAddress;\n    extractedData.address.city = jsonLdData.address.addressLocality;\n    extractedData.address.postal_code = jsonLdData.address.postalCode;\n    \n    extractedData.address.full_address = [\n      jsonLdData.address.streetAddress,\n      jsonLdData.address.addressLocality,\n      jsonLdData.address.postalCode\n    ].filter(Boolean).join(', ');\n  }\n  \n  // Extract coordinates\n  if (jsonLdData.geo) {\n    extractedData.address.coordinates.latitude = jsonLdData.geo.latitude;\n    extractedData.address.coordinates.longitude = jsonLdData.geo.longitude;\n  }\n  \n  extractedData.opening_hours = jsonLdData.openingHours || [];\n}\n\n// Fallback extractions\nif (!extractedData.description) {\n  extractedData.description = safeExtract(/<p[^>]*itemProp=\\\"description\\\"[^>]*>(.*?)<\\/p>/i);\n}\n\nextractedData.ico = safeExtract(/<h2[^>]*>IƒåO<\\/h2>[\\s\\S]*?<div[^>]*>(\\d+)/i);\n\nif (!extractedData.contact.email) {\n  const emailMatch = html.match(/mailto:([a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})/i);\n  if (emailMatch && emailMatch[1] && isValidEmail(emailMatch[1])) {\n    extractedData.contact.email = emailMatch[1];\n  }\n}\n\n// Fallback website extraction\nif (!extractedData.contact.websites || extractedData.contact.websites.length === 0) {\n  const websiteUrl = safeExtract(/<a[^>]*data-dot=\\\"show-website\\\"[^>]*href=\\\"([^\\\"]*)\\\"/i);\n  if (websiteUrl) {\n    const cleanUrl = websiteUrl.split('?')[0];\n    if (isValidWebsite(cleanUrl)) {\n      extractedData.contact.websites = [cleanUrl];\n    }\n  }\n}\n\n// Clean up phone numbers\nif (extractedData.contact.phone) {\n  extractedData.contact.phone = [...new Set(extractedData.contact.phone.filter(p => p))];\n}\n\n// Extract social media links\nconst socialMedia = {};\nif (extractedData.contact.websites) {\n  extractedData.contact.websites.forEach(url => {\n    if (url.includes('facebook.com')) socialMedia.facebook = url;\n    if (url.includes('instagram.com')) socialMedia.instagram = url;\n    if (url.includes('linkedin.com')) socialMedia.linkedin = url;\n    if (url.includes('twitter.com')) socialMedia.twitter = url;\n    if (url.includes('youtube.com')) socialMedia.youtube = url;\n  });\n}\n\n// Find best website\nlet bestWebsite = '';\nif (extractedData.contact.websites && extractedData.contact.websites.length > 0) {\n  bestWebsite = extractedData.contact.websites.find(url => \n    !url.match(/(facebook|twitter|instagram|linkedin|youtube)/i)\n  ) || extractedData.contact.websites[0];\n}\n\n// Return formatted data for Google Sheets\nreturn {\n  json: {\n    business_name: extractedData.business_name || 'Unknown',\n    email: extractedData.contact.email || '',\n    phone: extractedData.contact.phone[0] || '',\n    website: bestWebsite || '',\n    business_url: extractedData.business_url || '',\n    description: extractedData.description || '',\n    street: extractedData.address.street || '',\n    city: extractedData.address.city || '',\n    postal_code: extractedData.address.postal_code || '',\n    full_address: extractedData.address.full_address || '',\n    ico: extractedData.ico || '',\n    opening_hours: Array.isArray(extractedData.opening_hours) ? extractedData.opening_hours.join(', ') : (extractedData.opening_hours || ''),\n    all_phones: extractedData.contact.phone.join(', ') || '',\n    all_websites: extractedData.contact.websites.join(', ') || '',\n    facebook: socialMedia.facebook || '',\n    instagram: socialMedia.instagram || '',\n    linkedin: socialMedia.linkedin || '',\n    twitter: socialMedia.twitter || '',\n    youtube: socialMedia.youtube || '',\n    latitude: extractedData.address.coordinates.latitude || '',\n    longitude: extractedData.address.coordinates.longitude || ''\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2208,208],"id":"3aa3f16b-166a-461d-a476-d4d5176cfd81","name":"üßπ Extract Business Data","retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2400,208],"id":"fa02b187-16c5-4674-8d59-efdf1492620d","name":"üì¶ Aggregate All Data"},{"parameters":{"jsCode":"// Enhanced Duplicate Removal with Smart Filtering\nconst allData = $json.data || [];\n\n// Use Set for efficient duplicate detection\nconst seenEmails = new Set();\nconst seenPhones = new Set();\nconst seenNames = new Set();\n\n// Filter function with multiple criteria\nconst isDuplicate = (item) => {\n  const email = item.email ? item.email.trim().toLowerCase() : null;\n  const phone = item.phone ? item.phone.trim() : null;\n  const name = item.business_name ? item.business_name.trim().toLowerCase() : null;\n  \n  // Check email duplicates\n  if (email && email !== '' && seenEmails.has(email)) {\n    return true;\n  }\n  \n  // Check phone duplicates (if no email)\n  if (phone && phone !== '' && !email && seenPhones.has(phone)) {\n    return true;\n  }\n  \n  // Check name duplicates (if no email or phone)\n  if (name && name !== '' && !email && !phone && seenNames.has(name)) {\n    return true;\n  }\n  \n  // Add to tracking sets\n  if (email) seenEmails.add(email);\n  if (phone) seenPhones.add(phone);\n  if (name) seenNames.add(name);\n  \n  return false;\n};\n\n// Filter out duplicates\nconst filteredData = allData.filter(item => !isDuplicate(item));\n\nconsole.log(`üìä Original data: ${allData.length} items`);\nconsole.log(`‚úÖ Filtered data: ${filteredData.length} items`);\nconsole.log(`üóëÔ∏è Removed duplicates: ${allData.length - filteredData.length} items`);\n\nreturn [{\n  json: {\n    filtered_data: filteredData,\n    total_original: allData.length,\n    total_filtered: filteredData.length,\n    duplicates_removed: allData.length - filteredData.length\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2608,208],"id":"324c44ce-2d09-401e-8ed1-f8c5e6c01b0d","name":"üîç Remove Duplicates"},{"parameters":{"fieldToSplitOut":"filtered_data","options":{}},"type":"n8n-nodes-base.itemLists","typeVersion":3,"position":[2800,208],"id":"f73eedde-80b2-4c74-88d9-db0a53af0c62","name":"üìã Split Filtered Data"},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"1-r_o5J2st9R4GVzHELLKnGh8N12cM-BAhIBK54GNbcs","mode":"list","cachedResultName":"n8n firmyCZ scrape","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1-r_o5J2st9R4GVzHELLKnGh8N12cM-BAhIBK54GNbcs/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"List 1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1E5lMlVdcH6sEe8yTVKe1cA2qrILtO4Zavad4rU6T-4E/edit#gid=0"},"range":"A:U","columns":{"mappingMode":"defineBelow","value":{"Business Name":"={{ $json.business_name }}","Email":"={{ $json.email }}","Phone":"={{ $json.phone }}","Website":"={{ $json.website }}","Business URL":"={{ $json.business_url }}","Description":"={{ $json.description }}","Street":"={{ $json.street }}","City":"={{ $json.city }}","Postal Code":"={{ $json.postal_code }}","Full Address":"={{ $json.full_address }}","ICO":"={{ $json.ico }}","Opening Hours":"={{ $json.opening_hours }}","All Phones":"={{ $json.all_phones }}","All Websites":"={{ $json.all_websites }}","Facebook":"={{ $json.facebook }}","Instagram":"={{ $json.instagram }}","LinkedIn":"={{ $json.linkedin }}","Twitter":"={{ $json.twitter }}","YouTube":"={{ $json.youtube }}","Latitude":"={{ $json.latitude }}","Longitude":"={{ $json.longitude }}"}},"options":{"useAppend":true}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.4,"position":[3008,208],"id":"79ec3bca-c98b-466f-9d71-010267b4bcb2","name":"üíæ Save to Google Sheets","credentials":{"googleSheetsOAuth2Api":{"id":"Zx6E2WZ3T6x3R24f","name":"Google Sheets account"}}},{"parameters":{"jsCode":"// Enhanced Summary Report\nconst config = $('üîß Initialize Configuration').first().json.search_config;\nconst loopState = $('üîó Extract & Process Links').first().json.loop_state;\nconst finalStats = $('üîç Remove Duplicates').first().json;\n\nconst summary = {\n  execution_time: new Date().toISOString(),\n  search_config: {\n    city: config.city,\n    term: config.term,\n    max_results: config.max_results\n  },\n  results: {\n    total_pages_scraped: loopState.total_pages,\n    total_links_found: loopState.total_found || loopState.collected_links.length,\n    total_businesses_processed: finalStats.total_original,\n    total_unique_businesses: finalStats.total_filtered,\n    duplicates_removed: finalStats.duplicates_removed,\n    success_rate: finalStats.total_filtered / Math.max(loopState.collected_links.length, 1) * 100\n  },\n  performance: {\n    average_per_page: loopState.collected_links.length / Math.max(loopState.total_pages, 1),\n    data_quality_score: finalStats.total_filtered / Math.max(finalStats.total_original, 1) * 100\n  }\n};\n\nconsole.log('üéâ SCRAPING COMPLETED SUCCESSFULLY!');\nconsole.log(`üìä Summary: ${summary.results.total_unique_businesses} unique businesses found`);\nconsole.log(`üìà Success rate: ${summary.results.success_rate.toFixed(1)}%`);\nconsole.log(`üèÜ Data quality: ${summary.performance.data_quality_score.toFixed(1)}%`);\n\nreturn {\n  json: summary\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3200,208],"id":"a491cbc1-b238-41d5-a387-694d1aaaa7ba","name":"üìä Generate Summary Report"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,208],"id":"91990315-c104-41c4-a70d-ee8a9988addc","name":"üöÄ Start Scraping"},{"parameters":{"content":"## üöÄ ENHANCED CZECH BUSINESS SCRAPER\n\n### Key Improvements:\n- ‚úÖ Simplified architecture with structured data\n- ‚úÖ Enhanced error handling and retry logic\n- ‚úÖ Smart rate limiting and batching\n- ‚úÖ Improved data validation and cleaning\n- ‚úÖ Better duplicate detection\n- ‚úÖ Comprehensive logging and monitoring\n- ‚úÖ Performance optimizations\n\n### Configuration:\n- City: Praha\n- Term: kade≈ônictv√≠\n- Max Results: 150\n- Rate Limit: 2 requests/second\n\n### Features:\n- üîÑ Multi-page scraping with pagination\n- üõ°Ô∏è Robust error recovery\n- üìä Data quality scoring\n- üóëÔ∏è Smart duplicate removal\n- üìà Performance monitoring","height":608,"width":544},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-400,-96],"id":"d92e8d01-a584-4f10-851b-32a3158d0269","name":"üìã Workflow Documentation"}],"connections":{"üîß Initialize Configuration":{"main":[[{"node":"üîÑ Initialize Loop State","type":"main","index":0}]]},"üîÑ Initialize Loop State":{"main":[[{"node":"üìÑ Scrape Search Page","type":"main","index":0}]]},"üìÑ Scrape Search Page":{"main":[[{"node":"üîó Extract & Process Links","type":"main","index":0}]]},"üîó Extract & Process Links":{"main":[[{"node":"ü§î Continue Loop?","type":"main","index":0}]]},"ü§î Continue Loop?":{"main":[[{"node":"‚è±Ô∏è Rate Limit Wait","type":"main","index":0}],[{"node":"üìã Split URLs for Processing","type":"main","index":0}]]},"‚è±Ô∏è Rate Limit Wait":{"main":[[{"node":"üìÑ Scrape Search Page","type":"main","index":0}]]},"üìã Split URLs for Processing":{"main":[[{"node":"üì¶ Process in Batches (5)","type":"main","index":0}]]},"üì¶ Process in Batches (5)":{"main":[[{"node":"‚è±Ô∏è Batch Rate Limit","type":"main","index":0}]]},"‚è±Ô∏è Batch Rate Limit":{"main":[[{"node":"üè¢ Scrape Business Page","type":"main","index":0}]]},"üè¢ Scrape Business Page":{"main":[[{"node":"üßπ Extract Business Data","type":"main","index":0}]]},"üßπ Extract Business Data":{"main":[[{"node":"üì¶ Aggregate All Data","type":"main","index":0}]]},"üì¶ Aggregate All Data":{"main":[[{"node":"üîç Remove Duplicates","type":"main","index":0}]]},"üîç Remove Duplicates":{"main":[[{"node":"üìã Split Filtered Data","type":"main","index":0}]]},"üìã Split Filtered Data":{"main":[[{"node":"üíæ Save to Google Sheets","type":"main","index":0}]]},"üíæ Save to Google Sheets":{"main":[[{"node":"üìä Generate Summary Report","type":"main","index":0}]]},"üöÄ Start Scraping":{"main":[[{"node":"üîß Initialize Configuration","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"3bb9a7b7-c5f1-4b6a-aec5-dc6a71756ef7","triggerCount":0,"shared":[{"createdAt":"2025-08-15T13:05:59.196Z","updatedAt":"2025-08-15T13:05:59.196Z","role":"workflow:owner","workflowId":"KydqfhdzQ5FS1K6i","projectId":"zpk8zHoHWXf3cQ7T"}],"tags":[]}